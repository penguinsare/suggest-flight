{"version":3,"sources":["components/Description.js","libs/axios.js","apiCalls/AirportsApi.js","components/LocationPicker.js","apiCalls/QuotesApi.js","components/FlightSearch.js","components/QuotesList.js","components/FlightsListCollapse.js","components/Results.js","components/Suggestions.js","utils/theme.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["Description","Stack","Alert","status","Popover","usePortal","Button","minWidth","bg","zIndex","Link","href","instance","axios","create","baseURL","getAirportsApi","payload","a","promise","get","LocationPicker","setLocation","placeholder","useState","placeName","setPlaceName","locationListFromApi","setLocationListFromApi","locationList","setLocationList","locationListIsOpen","setLocationListIsOpen","locationInputRef","useRef","useEffect","filter","o","CityId","initialFocusRef","isOpen","onOpen","onClose","closeOnBlur","closeOnEsc","Input","mr","w","value","onChange","e","preventDefault","current","focus","ref","marginBottom","target","length","placesContainer","data","Places","alert","PlaceName","toUpperCase","includes","map","loc","index","Box","p","key","PlaceId","onClick","onMouseEnter","style","backgroundColor","onMouseLeave","CountryName","getQuotesFromApi","origin","destination","destinationCountryCode","startDate","returnDate","BoxCustom","children","d","justifyContent","alignItems","flexDirection","FlightSearch","setQuotes","setOrigin","setDestination","Date","setStartDate","setReturnDate","roundTrip","setRoundTrip","loading","setLoading","CustomDatePickerInput","forwardRef","console","log","mt","Text","fontSize","borderWidth","rounded","shadow","RadioGroup","defaultValue","spacing","isInline","Radio","variantColor","selected","date","customInput","disabled","toISOString","slice","CountryId","substring","quotes","countryId","Spinner","Icon","name","QuotesList","currency","Currencies","Quotes","quote","airlines","OutboundLeg","CarrierIds","forEach","carrierId","carrier","Carriers","find","CarrierId","Name","place","OriginId","DestinationId","departureTime","DepartureDate","toDateString","Flex","align","textAlign","QuoteId","flex","Tooltip","label","IataCode","SymbolOnLeft","Symbol","MinPrice","FlightsListCollapse","title","buttonLabel","show","setShow","Collapse","mb","startingHeight","Results","Suggestions","error","border","myTheme","theme","fonts","heading","body","colors","primary","500","800","700","fieldBorderWidth","thin","bold","App","CSSReset","className","styles","container","my","alternativeQuotes","Boolean","window","location","hostname","match","ThemedApp","ThemeProvider","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.c39f98e4.chunk.js","sourcesContent":["import {\r\n  Alert,\r\n  AlertIcon,\r\n  Button,\r\n  Link,\r\n  Popover,\r\n  PopoverBody,\r\n  PopoverContent,\r\n  PopoverHeader,\r\n  PopoverTrigger,\r\n  Stack,\r\n} from '@chakra-ui/core';\r\nimport React from 'react';\r\n\r\nfunction Description() {\r\n  return (\r\n    <Stack>\r\n      <Alert status='info'>\r\n        <AlertIcon />\r\n        Covid flight search will search for your flight and in addition will\r\n        provide you with alternative flights to your destinations' neighbouring\r\n        countries that have fewer Covid cases per one million population.\r\n      </Alert>\r\n      <Alert status='warning'>\r\n        <AlertIcon />\r\n        Disclaimer - Covid flight search is a portfolio project showcasing\r\n        programming skills and should not be used for real trip planning or\r\n        evaluating the covid situation in different countries.\r\n        <Popover usePortal>\r\n          <PopoverTrigger>\r\n            <Button minWidth='5em' bg='info.600'>\r\n              APIs used\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent zIndex='4'>\r\n            <PopoverBody>\r\n              <PopoverHeader>The APIs used in this project are:</PopoverHeader>\r\n              <PopoverBody>\r\n                <Stack>\r\n                  <Link href='https://rapidapi.com/skyscanner/api/skyscanner-flight-search?endpoint=5aa1eab3e4b00687d3574279'>\r\n                    Skyscanner Flight Search API at RapidApi\r\n                  </Link>\r\n                  <Link href='https://rapidapi.com/api-sports/api/covid-193'>\r\n                    Covid Stats API at RapidAPi\r\n                  </Link>\r\n                </Stack>\r\n              </PopoverBody>\r\n            </PopoverBody>\r\n          </PopoverContent>\r\n        </Popover>\r\n      </Alert>\r\n    </Stack>\r\n  );\r\n}\r\n\r\nexport default Description;\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  //baseURL: 'http://localhost:8081',\r\n  baseURL: 'https://flights.polytech-software.com',\r\n});\r\n\r\nexport default instance;\r\n","import axios from '../libs/axios';\r\n\r\nexport const getAirportsApi = async (payload) => {\r\n  let promise = axios.get(`/places?query=${payload}`);\r\n  //console.log('promise', promise);\r\n  return promise;\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Input,\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverHeader,\r\n  PopoverContent,\r\n  PopoverBody,\r\n} from '@chakra-ui/core';\r\nimport { getAirportsApi } from '../apiCalls/AirportsApi';\r\n\r\nfunction LocationPicker({ setLocation, placeholder }) {\r\n  // const [close, setClose] = useState(false);\r\n  // const [suggestions, setSuggestions] = useState(['bangkok', 'chaing mai']);\r\n  const [placeName, setPlaceName] = useState('');\r\n  const [locationListFromApi, setLocationListFromApi] = useState([]);\r\n  const [locationList, setLocationList] = useState([]);\r\n  const [locationListIsOpen, setLocationListIsOpen] = useState(false);\r\n\r\n  const open = () => setLocationListIsOpen(true);\r\n  const close = () => setLocationListIsOpen(false);\r\n\r\n  const locationInputRef = useRef(null);\r\n  useEffect(() => {\r\n    setLocationList(locationListFromApi.filter((o) => o.CityId !== '-sky'));\r\n  }, [locationListFromApi]);\r\n  // useEffect(() => {}, []);\r\n  return (\r\n    <Popover\r\n      initialFocusRef={locationInputRef}\r\n      isOpen={locationListIsOpen}\r\n      onOpen={open}\r\n      onClose={close}\r\n      closeOnBlur={true}\r\n      closeOnEsc={true}>\r\n      <PopoverTrigger>\r\n        <Input\r\n          mr='3px'\r\n          w='auto'\r\n          placeholder={placeholder}\r\n          value={placeName}\r\n          onChange={(e) => {\r\n            e.preventDefault();\r\n            if (!locationListIsOpen) {\r\n              setLocationListIsOpen(true);\r\n            } else {\r\n              locationInputRef.current.focus();\r\n            }\r\n          }}></Input>\r\n      </PopoverTrigger>\r\n      <PopoverContent zIndex={4}>\r\n        <PopoverHeader>Destinations:</PopoverHeader>\r\n        <PopoverBody>\r\n          <Input\r\n            ref={locationInputRef}\r\n            w='auto'\r\n            mr='3px'\r\n            marginBottom='0.5em'\r\n            placeholder={placeholder}\r\n            value={placeName}\r\n            onChange={(e) => {\r\n              e.preventDefault();\r\n              if (e.target.value.length === 2) {\r\n                (async () => {\r\n                  try {\r\n                    let placesContainer = await getAirportsApi(e.target.value);\r\n                    setLocationListFromApi(placesContainer.data.Places);\r\n                  } catch (err) {\r\n                    alert(err); // TypeError: failed to fetch\r\n                  }\r\n                })();\r\n              } else if (e.target.value.length > 2) {\r\n                setLocationList(\r\n                  locationListFromApi.filter(\r\n                    (o) =>\r\n                      o.PlaceName.toUpperCase().includes(\r\n                        e.target.value.toUpperCase()\r\n                      ) && o.CityId !== '-sky'\r\n                  )\r\n                );\r\n              }\r\n              setPlaceName(e.target.value);\r\n            }}></Input>\r\n          {locationList?.length > 0 &&\r\n            locationList.map((loc, index) => {\r\n              return (\r\n                <Box\r\n                  p='0.5em'\r\n                  key={loc.PlaceId}\r\n                  onClick={() => {\r\n                    setLocation(loc);\r\n                    setPlaceName(loc.PlaceName);\r\n                    setLocationListIsOpen(false);\r\n                  }}\r\n                  onMouseEnter={(e) =>\r\n                    (e.target.style.backgroundColor = 'lightgray')\r\n                  }\r\n                  onMouseLeave={(e) =>\r\n                    (e.target.style.backgroundColor = 'white')\r\n                  }>\r\n                  {loc.PlaceName}, {loc.CountryName}\r\n                </Box>\r\n              );\r\n            })}\r\n        </PopoverBody>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nexport default LocationPicker;\r\n","import axios from '../libs/axios';\r\n\r\nexport async function getQuotesFromApi({\r\n  origin,\r\n  destination,\r\n  destinationCountryCode,\r\n  startDate,\r\n  returnDate,\r\n}) {\r\n  let promise = axios.get(\r\n    `/browseroutes/${origin}/${destination}/${destinationCountryCode}/${startDate}/${returnDate}`\r\n  );\r\n  return promise;\r\n}\r\n","import React, { useState, useEffect, forwardRef } from 'react';\r\nimport {\r\n  Stack,\r\n  Box,\r\n  Text,\r\n  Button,\r\n  RadioGroup,\r\n  Radio,\r\n  Icon,\r\n  Spinner,\r\n} from '@chakra-ui/core';\r\nimport LocationPicker from './LocationPicker';\r\nimport ReactDatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport { getQuotesFromApi } from '../apiCalls/QuotesApi';\r\n\r\nfunction BoxCustom({ children }) {\r\n  return (\r\n    <Box\r\n      p='3'\r\n      d='flex'\r\n      justifyContent='center'\r\n      alignItems='center'\r\n      flexDirection={['column', 'column', 'row', 'row']}>\r\n      {children}\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction FlightSearch({ setQuotes }) {\r\n  const [origin, setOrigin] = useState(null);\r\n  const [destination, setDestination] = useState(null);\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [returnDate, setReturnDate] = useState(new Date());\r\n  const [roundTrip, setRoundTrip] = useState(true);\r\n  const [loading, setLoading] = useState(false);\r\n  //const theme = useTheme();\r\n\r\n  const CustomDatePickerInput = forwardRef(({ value, onClick }, ref) => (\r\n    <Button onClick={onClick} mr='3px' ref={ref}>\r\n      {value}\r\n    </Button>\r\n  ));\r\n\r\n  useEffect(() => {\r\n    console.log('Origin', origin);\r\n    console.log('Destination', destination);\r\n  }, [origin, destination]);\r\n\r\n  useEffect(() => {\r\n    console.log('Origin', origin);\r\n    console.log('Destination', destination);\r\n  }, [origin, destination]);\r\n\r\n  return (\r\n    <>\r\n      <Stack mt={8}>\r\n        <Text fontSize='24px' justifyContent='center' d='flex'>\r\n          Search Flight\r\n        </Text>\r\n        <Box borderWidth='1px' rounded='4px' shadow='md'>\r\n          <BoxCustom>\r\n            <RadioGroup\r\n              defaultValue='2'\r\n              spacing={5}\r\n              isInline\r\n              onChange={(e) =>\r\n                e.target.value === '2'\r\n                  ? setRoundTrip(true)\r\n                  : setRoundTrip(false)\r\n              }>\r\n              <Radio variantColor='primary' value='1'>\r\n                One Way\r\n              </Radio>\r\n              <Radio variantColor='primary' value='2'>\r\n                Round Trip\r\n              </Radio>\r\n            </RadioGroup>\r\n          </BoxCustom>\r\n          <BoxCustom>\r\n            <LocationPicker\r\n              setLocation={(origin) => setOrigin(origin)}\r\n              placeholder={'Where from'}\r\n            />\r\n            <LocationPicker\r\n              setLocation={(destination) => setDestination(destination)}\r\n              placeholder={'Where to'}\r\n            />\r\n\r\n            <ReactDatePicker\r\n              selected={startDate}\r\n              onChange={(date) => setStartDate(date)}\r\n              customInput={<CustomDatePickerInput />}\r\n            />\r\n\r\n            <ReactDatePicker\r\n              disabled={!roundTrip}\r\n              selected={returnDate}\r\n              onChange={(date) => setReturnDate(date)}\r\n              customInput={<CustomDatePickerInput />}\r\n            />\r\n\r\n            <Button\r\n              variantColor='primary'\r\n              minWidth='5em'\r\n              onClick={() => {\r\n                (async () => {\r\n                  let quotes;\r\n                  setLoading(true);\r\n                  if (origin && destination) {\r\n                    console.log('origin', origin);\r\n                    console.log('destination', destination);\r\n\r\n                    console.log(\r\n                      'startDate',\r\n                      startDate.toISOString().slice(0, 10)\r\n                    );\r\n                    console.log(\r\n                      'returnDate',\r\n                      returnDate.toISOString().slice(0, 10)\r\n                    );\r\n\r\n                    console.log(\r\n                      `call quotes ${origin.PlaceId}/${destination.PlaceId}/${\r\n                        origin?.CountryId\r\n                      }/${startDate\r\n                        .toISOString()\r\n                        .slice(0, 10)}/${returnDate.toISOString().slice(0, 10)}`\r\n                    );\r\n                    try {\r\n                      console.log('round trip', roundTrip);\r\n                      if (roundTrip) {\r\n                        quotes = await getQuotesFromApi({\r\n                          origin: origin.PlaceId,\r\n                          destination: destination.PlaceId,\r\n                          destinationCountryCode: destination?.CountryId.substring(\r\n                            0,\r\n                            2\r\n                          ),\r\n                          startDate: startDate.toISOString().slice(0, 10),\r\n                          returnDate: returnDate.toISOString().slice(0, 10),\r\n                        });\r\n                        console.log('quotes', quotes);\r\n                        setQuotes(quotes.data);\r\n                        setLoading(false);\r\n                      } else {\r\n                        quotes = await getQuotesFromApi({\r\n                          origin: origin.PlaceId,\r\n                          destination: destination.PlaceId,\r\n                          destinationCountryCode: origin?.countryId?.substring(\r\n                            0,\r\n                            2\r\n                          ),\r\n                          startDate: startDate.toISOString().slice(0, 10),\r\n                        });\r\n                        setQuotes(quotes.data);\r\n                        setLoading(false);\r\n                      }\r\n                    } catch (err) {\r\n                      console.log('Get quotes failed: ', err);\r\n                    }\r\n                  }\r\n                })();\r\n              }}>\r\n              {loading ? <Spinner /> : <Icon name='search' mr='4px' />}\r\n            </Button>\r\n          </BoxCustom>\r\n        </Box>\r\n      </Stack>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FlightSearch;\r\n","import React from 'react';\r\nimport { Box, Flex, Text, Tooltip } from '@chakra-ui/core';\r\n\r\nfunction QuotesList({ quotes }) {\r\n  const currency = quotes ? quotes.Currencies[0] : '';\r\n  return (\r\n    quotes.Quotes &&\r\n    quotes.Quotes.map((quote) => {\r\n      let airlines = '';\r\n      quote.OutboundLeg.CarrierIds.forEach((carrierId, index) => {\r\n        let carrier = quotes.Carriers.find(\r\n          (carrier) => carrier.CarrierId === carrierId\r\n        );\r\n        if (carrier) {\r\n          airlines += index > 0 ? ' + ' : '';\r\n          airlines += carrier.Name;\r\n        }\r\n      });\r\n\r\n      const origin = quotes.Places.find(\r\n        (place) => place.PlaceId === quote.OutboundLeg.OriginId\r\n      );\r\n      const destination = quotes.Places.find(\r\n        (place) => place.PlaceId === quote.OutboundLeg.DestinationId\r\n      );\r\n      console.log('origin', origin);\r\n      console.log('destination', destination);\r\n      const departureTime = new Date(\r\n        quote.OutboundLeg.DepartureDate\r\n      ).toDateString();\r\n      console.log('departureTime', departureTime);\r\n\r\n      return (\r\n        <Flex\r\n          flexDirection='row'\r\n          borderWidth='1px'\r\n          rounded='4px'\r\n          p='12px'\r\n          justifyContent='center'\r\n          align='center'\r\n          textAlign='center'\r\n          shadow='md'\r\n          key={quote.QuoteId}>\r\n          <Box flex='1'>{airlines}</Box>\r\n          {origin && (\r\n            <Box flex='1'>\r\n              <Tooltip label={origin.Name}>\r\n                <Text>{origin.IataCode}</Text>\r\n              </Tooltip>\r\n              <Text>{departureTime}</Text>\r\n            </Box>\r\n          )}\r\n          <Box flex='1'>---</Box>\r\n          <Box flex='1'>\r\n            {destination && (\r\n              <Tooltip label={destination.Name}>\r\n                <Text>{destination.IataCode}</Text>\r\n              </Tooltip>\r\n            )}\r\n          </Box>\r\n          <Box flex='1'>\r\n            <Text>\r\n              {currency && currency.SymbolOnLeft && currency.Symbol}\r\n              {quote.MinPrice}\r\n              {currency && !currency.SymbolOnLeft && currency.Symbol}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n      );\r\n    })\r\n  );\r\n}\r\n\r\nexport default QuotesList;\r\n","import React, { useState } from 'react';\r\nimport { Stack, Text, Collapse, Button } from '@chakra-ui/core';\r\nimport QuotesList from './QuotesList';\r\n\r\nfunction FlightsListCollapse({ title, buttonLabel, quote }) {\r\n  const [show, setShow] = useState(false);\r\n\r\n  return (\r\n    <Stack mt={8}>\r\n      <Text fontSize='24px' justifyContent='center' d='flex'>\r\n        {title}\r\n      </Text>\r\n      <Collapse mb={4} isOpen={show} startingHeight={210}>\r\n        <QuotesList quotes={quote} />\r\n      </Collapse>\r\n      <Button variantColor='primary' onClick={() => setShow(!show)}>\r\n        {buttonLabel}\r\n      </Button>\r\n    </Stack>\r\n  );\r\n}\r\n\r\nexport default FlightsListCollapse;\r\n","import React from 'react';\r\nimport FlightsListCollapse from './FlightsListCollapse';\r\n\r\nfunction Results({ quotes }) {\r\n  return (\r\n    <FlightsListCollapse\r\n      title={'Flights'}\r\n      buttonLabel={'Click to see the more flights'}\r\n      quote={quotes}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import { Box, Text } from '@chakra-ui/core';\r\nimport React from 'react';\r\nimport FlightsListCollapse from './FlightsListCollapse';\r\n\r\nfunction Suggestions({ quotes, error }) {\r\n  // const [show, setShow] = useState([]);\r\n  // const handleToggle = (index) => {\r\n  //   let tempShow = show;\r\n  //   tempShow[index] = !!show[index];\r\n  //   setShow(tempShow);\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        fontSize='24px'\r\n        justifyContent='center'\r\n        d='flex'\r\n        mt='2em'\r\n        bg='teal.50'\r\n        p='1em'\r\n        rounded='2'\r\n        border='1px'>\r\n        Check out alternative destinations in neighbouring countries that have\r\n        fewer Covid cases per one million population.\r\n      </Box>\r\n      {quotes &&\r\n        quotes.map((quote, index) => {\r\n          const destination = quote.Places.find(\r\n            (place) =>\r\n              place.PlaceId === quote.Quotes[0].OutboundLeg.DestinationId\r\n          );\r\n\r\n          return (\r\n            <FlightsListCollapse\r\n              key={index}\r\n              title={\r\n                destination\r\n                  ? destination.Name +\r\n                    ' (' +\r\n                    destination.IataCode +\r\n                    '), ' +\r\n                    destination.CountryName\r\n                  : ''\r\n              }\r\n              buttonLabel={` Click to see more ${destination.Name} flights`}\r\n              quote={quote}\r\n            />\r\n          );\r\n        })}\r\n      {!quotes && (\r\n        <Text\r\n          fontSize='24px'\r\n          justifyContent='center'\r\n          d='flex'\r\n          mt='2em'\r\n          bg='pink'>\r\n          {error}\r\n        </Text>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Suggestions;\r\n","import { theme } from '@chakra-ui/core';\r\n\r\n// Let's say you want to add custom colors\r\nconst myTheme = {\r\n  ...theme,\r\n  fonts: {\r\n    ...theme.fonts,\r\n    heading: '\"Inter\", sans-serif',\r\n    body: '\"Inter\", sans-serif',\r\n  },\r\n  colors: {\r\n    ...theme.colors,\r\n    primary: {\r\n      500: '#0d6ffb',\r\n      800: '#153e75',\r\n      700: '#2a69ac',\r\n    },\r\n  },\r\n  fieldBorderWidth: {\r\n    thin: '1px',\r\n    bold: '5px',\r\n  },\r\n  /* fontSizes: {\r\n      xxs: '12px',\r\n      xs: '16px',\r\n      sm: '18px',\r\n      md: '20px',\r\n      lg: '24px',\r\n      xl: '30px',\r\n      '2xl': '36px',\r\n      '3xl': '48px',\r\n      '4xl': '64px',\r\n      '5xl': '72px',\r\n      '6xl': '86px',\r\n    }, */\r\n};\r\n\r\nexport default myTheme;\r\n","import { CSSReset, Box, Alert, AlertIcon } from '@chakra-ui/core';\r\nimport { ThemeProvider } from 'emotion-theming';\r\nimport React, { useState, useEffect } from 'react';\r\nimport styles from './App.module.css';\r\nimport Description from './components/Description';\r\nimport FlightSearch from './components/FlightSearch';\r\nimport Results from './components/Results';\r\nimport Suggestions from './components/Suggestions';\r\nimport myTheme from './utils/theme';\r\n\r\nfunction App({ children }) {\r\n  const [quotes, setQuotes] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log('Got quotes fro mthe api', quotes);\r\n  }, [quotes]);\r\n\r\n  return (\r\n    <ThemeProvider theme={myTheme}>\r\n      <CSSReset />\r\n      {children}\r\n      <Box className={styles.container}>\r\n        <Description />\r\n        <FlightSearch setQuotes={(quotes) => setQuotes(quotes)} />\r\n        {quotes && quotes.error && (\r\n          <Alert status='error' my='1em'>\r\n            <AlertIcon />\r\n            {quotes.error}\r\n          </Alert>\r\n        )}\r\n        {quotes && quotes.quotes && <Results quotes={quotes?.quotes} />}\r\n        {quotes && quotes.alternativeQuotes.length > 0 && (\r\n          <Suggestions quotes={quotes?.alternativeQuotes} />\r\n        )}\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ThemeProvider } from '@chakra-ui/core';\n\nconst ThemedApp = () => (\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>\n);\n\nReactDOM.render(<ThemedApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2eP8i\"};"],"sourceRoot":""}